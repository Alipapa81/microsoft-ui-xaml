// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InkCanvas.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(InkCanvas)
}

#include "InkCanvas.g.cpp"

GlobalDependencyProperty InkCanvasProperties::s_IsEnabledProperty{ nullptr };

InkCanvasProperties::InkCanvasProperties()
{
    EnsureProperties();
}

void InkCanvasProperties::EnsureProperties()
{
    if (!s_IsEnabledProperty)
    {
        s_IsEnabledProperty =
            InitializeDependencyProperty(
                L"IsEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::InkCanvas>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsEnabledPropertyChanged));
    }
}

void InkCanvasProperties::ClearProperties()
{
    s_IsEnabledProperty = nullptr;
}

void InkCanvasProperties::OnIsEnabledPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::InkCanvas>();
    winrt::get_self<InkCanvas>(owner)->OnIsEnabledPropertyChanged(args);
}

void InkCanvasProperties::IsEnabled(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkCanvas*>(this)->SetValue(s_IsEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool InkCanvasProperties::IsEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<InkCanvas*>(this)->GetValue(s_IsEnabledProperty));
}
