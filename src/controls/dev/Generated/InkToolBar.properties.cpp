// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InkToolBar.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(InkToolBar)
}

#include "InkToolBar.g.cpp"

GlobalDependencyProperty InkToolBarProperties::s_ActiveToolProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_ButtonFlyoutPlacementProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_ChildrenProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_InitialControlsProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_InkDrawingAttributesProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_IsRulerButtonCheckedProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_IsStencilButtonCheckedProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_OrientationProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_TargetInkCanvasProperty{ nullptr };
GlobalDependencyProperty InkToolBarProperties::s_TargetInkPresenterProperty{ nullptr };

InkToolBarProperties::InkToolBarProperties()
    : m_activeToolChangedEventSource{static_cast<InkToolBar*>(this)}
    , m_eraseAllClickedEventSource{static_cast<InkToolBar*>(this)}
    , m_eraserFlyoutItemClickedEventSource{static_cast<InkToolBar*>(this)}
    , m_inkDrawingAttributesChangedEventSource{static_cast<InkToolBar*>(this)}
    , m_isStencilButtonCheckedChangedEventSource{static_cast<InkToolBar*>(this)}
{
    EnsureProperties();
}

void InkToolBarProperties::EnsureProperties()
{
    if (!s_ActiveToolProperty)
    {
        s_ActiveToolProperty =
            InitializeDependencyProperty(
                L"ActiveTool",
                winrt::name_of<winrt::InkToolBarToolButton>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::InkToolBarToolButton>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ButtonFlyoutPlacementProperty)
    {
        s_ButtonFlyoutPlacementProperty =
            InitializeDependencyProperty(
                L"ButtonFlyoutPlacement",
                winrt::name_of<winrt::InkToolBarButtonFlyoutPlacement>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::InkToolBarButtonFlyoutPlacement>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ChildrenProperty)
    {
        s_ChildrenProperty =
            InitializeDependencyProperty(
                L"Children",
                winrt::name_of<winrt::DependencyObjectCollection>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::DependencyObjectCollection>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_InitialControlsProperty)
    {
        s_InitialControlsProperty =
            InitializeDependencyProperty(
                L"InitialControls",
                winrt::name_of<winrt::InkToolBarInitialControls>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::InkToolBarInitialControls>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_InkDrawingAttributesProperty)
    {
        s_InkDrawingAttributesProperty =
            InitializeDependencyProperty(
                L"InkDrawingAttributes",
                winrt::name_of<winrt::InkDrawingAttributes>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::InkDrawingAttributes>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsRulerButtonCheckedProperty)
    {
        s_IsRulerButtonCheckedProperty =
            InitializeDependencyProperty(
                L"IsRulerButtonChecked",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsStencilButtonCheckedProperty)
    {
        s_IsStencilButtonCheckedProperty =
            InitializeDependencyProperty(
                L"IsStencilButtonChecked",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_OrientationProperty)
    {
        s_OrientationProperty =
            InitializeDependencyProperty(
                L"Orientation",
                winrt::name_of<winrt::Orientation>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::Orientation>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TargetInkCanvasProperty)
    {
        s_TargetInkCanvasProperty =
            InitializeDependencyProperty(
                L"TargetInkCanvas",
                winrt::name_of<winrt::InkCanvas>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::InkCanvas>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_TargetInkPresenterProperty)
    {
        s_TargetInkPresenterProperty =
            InitializeDependencyProperty(
                L"TargetInkPresenter",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::InkToolBar>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                nullptr);
    }
}

void InkToolBarProperties::ClearProperties()
{
    s_ActiveToolProperty = nullptr;
    s_ButtonFlyoutPlacementProperty = nullptr;
    s_ChildrenProperty = nullptr;
    s_InitialControlsProperty = nullptr;
    s_InkDrawingAttributesProperty = nullptr;
    s_IsRulerButtonCheckedProperty = nullptr;
    s_IsStencilButtonCheckedProperty = nullptr;
    s_OrientationProperty = nullptr;
    s_TargetInkCanvasProperty = nullptr;
    s_TargetInkPresenterProperty = nullptr;
}

void InkToolBarProperties::ActiveTool(winrt::InkToolBarToolButton const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_ActiveToolProperty, ValueHelper<winrt::InkToolBarToolButton>::BoxValueIfNecessary(value));
    }
}

winrt::InkToolBarToolButton InkToolBarProperties::ActiveTool()
{
    return ValueHelper<winrt::InkToolBarToolButton>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_ActiveToolProperty));
}

void InkToolBarProperties::ButtonFlyoutPlacement(winrt::InkToolBarButtonFlyoutPlacement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_ButtonFlyoutPlacementProperty, ValueHelper<winrt::InkToolBarButtonFlyoutPlacement>::BoxValueIfNecessary(value));
    }
}

winrt::InkToolBarButtonFlyoutPlacement InkToolBarProperties::ButtonFlyoutPlacement()
{
    return ValueHelper<winrt::InkToolBarButtonFlyoutPlacement>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_ButtonFlyoutPlacementProperty));
}

void InkToolBarProperties::Children(winrt::DependencyObjectCollection const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_ChildrenProperty, ValueHelper<winrt::DependencyObjectCollection>::BoxValueIfNecessary(value));
    }
}

winrt::DependencyObjectCollection InkToolBarProperties::Children()
{
    return ValueHelper<winrt::DependencyObjectCollection>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_ChildrenProperty));
}

void InkToolBarProperties::InitialControls(winrt::InkToolBarInitialControls const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_InitialControlsProperty, ValueHelper<winrt::InkToolBarInitialControls>::BoxValueIfNecessary(value));
    }
}

winrt::InkToolBarInitialControls InkToolBarProperties::InitialControls()
{
    return ValueHelper<winrt::InkToolBarInitialControls>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_InitialControlsProperty));
}

void InkToolBarProperties::InkDrawingAttributes(winrt::InkDrawingAttributes const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_InkDrawingAttributesProperty, ValueHelper<winrt::InkDrawingAttributes>::BoxValueIfNecessary(value));
    }
}

winrt::InkDrawingAttributes InkToolBarProperties::InkDrawingAttributes()
{
    return ValueHelper<winrt::InkDrawingAttributes>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_InkDrawingAttributesProperty));
}

void InkToolBarProperties::IsRulerButtonChecked(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_IsRulerButtonCheckedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool InkToolBarProperties::IsRulerButtonChecked()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_IsRulerButtonCheckedProperty));
}

void InkToolBarProperties::IsStencilButtonChecked(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_IsStencilButtonCheckedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool InkToolBarProperties::IsStencilButtonChecked()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_IsStencilButtonCheckedProperty));
}

void InkToolBarProperties::Orientation(winrt::Orientation const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_OrientationProperty, ValueHelper<winrt::Orientation>::BoxValueIfNecessary(value));
    }
}

winrt::Orientation InkToolBarProperties::Orientation()
{
    return ValueHelper<winrt::Orientation>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_OrientationProperty));
}

void InkToolBarProperties::TargetInkCanvas(winrt::InkCanvas const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_TargetInkCanvasProperty, ValueHelper<winrt::InkCanvas>::BoxValueIfNecessary(value));
    }
}

winrt::InkCanvas InkToolBarProperties::TargetInkCanvas()
{
    return ValueHelper<winrt::InkCanvas>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_TargetInkCanvasProperty));
}

void InkToolBarProperties::TargetInkPresenter(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBar*>(this)->SetValue(s_TargetInkPresenterProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable InkToolBarProperties::TargetInkPresenter()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<InkToolBar*>(this)->GetValue(s_TargetInkPresenterProperty));
}

winrt::event_token InkToolBarProperties::ActiveToolChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value)
{
    return m_activeToolChangedEventSource.add(value);
}

void InkToolBarProperties::ActiveToolChanged(winrt::event_token const& token)
{
    m_activeToolChangedEventSource.remove(token);
}

winrt::event_token InkToolBarProperties::EraseAllClicked(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value)
{
    return m_eraseAllClickedEventSource.add(value);
}

void InkToolBarProperties::EraseAllClicked(winrt::event_token const& token)
{
    m_eraseAllClickedEventSource.remove(token);
}

winrt::event_token InkToolBarProperties::EraserFlyoutItemClicked(winrt::TypedEventHandler<winrt::InkToolBarEraserFlyoutItemClickedEventArgs, winrt::IInspectable> const& value)
{
    return m_eraserFlyoutItemClickedEventSource.add(value);
}

void InkToolBarProperties::EraserFlyoutItemClicked(winrt::event_token const& token)
{
    m_eraserFlyoutItemClickedEventSource.remove(token);
}

winrt::event_token InkToolBarProperties::InkDrawingAttributesChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value)
{
    return m_inkDrawingAttributesChangedEventSource.add(value);
}

void InkToolBarProperties::InkDrawingAttributesChanged(winrt::event_token const& token)
{
    m_inkDrawingAttributesChangedEventSource.remove(token);
}

winrt::event_token InkToolBarProperties::IsStencilButtonCheckedChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::InkToolBarIsStencilButtonCheckedChangedEventArgs> const& value)
{
    return m_isStencilButtonCheckedChangedEventSource.add(value);
}

void InkToolBarProperties::IsStencilButtonCheckedChanged(winrt::event_token const& token)
{
    m_isStencilButtonCheckedChangedEventSource.remove(token);
}
