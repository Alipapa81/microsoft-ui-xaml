// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InkToolBarPenButton.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(InkToolBarPenButton)
}

#include "InkToolBarPenButton.g.cpp"

GlobalDependencyProperty InkToolBarPenButtonProperties::s_MaxStrokeWidthProperty{ nullptr };
GlobalDependencyProperty InkToolBarPenButtonProperties::s_MinStrokeWidthProperty{ nullptr };
GlobalDependencyProperty InkToolBarPenButtonProperties::s_PaletteProperty{ nullptr };
GlobalDependencyProperty InkToolBarPenButtonProperties::s_SelectedBrushProperty{ nullptr };
GlobalDependencyProperty InkToolBarPenButtonProperties::s_SelectedBrushIndexProperty{ nullptr };
GlobalDependencyProperty InkToolBarPenButtonProperties::s_SelectedStrokeWidthProperty{ nullptr };

InkToolBarPenButtonProperties::InkToolBarPenButtonProperties()
{
    EnsureProperties();
}

void InkToolBarPenButtonProperties::EnsureProperties()
{
    InkToolBarToolButton::EnsureProperties();
    if (!s_MaxStrokeWidthProperty)
    {
        s_MaxStrokeWidthProperty =
            InitializeDependencyProperty(
                L"MaxStrokeWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_MinStrokeWidthProperty)
    {
        s_MinStrokeWidthProperty =
            InitializeDependencyProperty(
                L"MinStrokeWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_PaletteProperty)
    {
        s_PaletteProperty =
            InitializeDependencyProperty(
                L"Palette",
                winrt::name_of<winrt::IVector<winrt::Brush>>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::Brush>>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectedBrushProperty)
    {
        s_SelectedBrushProperty =
            InitializeDependencyProperty(
                L"SelectedBrush",
                winrt::name_of<winrt::Brush>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<winrt::Brush>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectedBrushIndexProperty)
    {
        s_SelectedBrushIndexProperty =
            InitializeDependencyProperty(
                L"SelectedBrushIndex",
                winrt::name_of<int>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<int>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectedStrokeWidthProperty)
    {
        s_SelectedStrokeWidthProperty =
            InitializeDependencyProperty(
                L"SelectedStrokeWidth",
                winrt::name_of<double>(),
                winrt::name_of<winrt::InkToolBarPenButton>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                nullptr);
    }
}

void InkToolBarPenButtonProperties::ClearProperties()
{
    s_MaxStrokeWidthProperty = nullptr;
    s_MinStrokeWidthProperty = nullptr;
    s_PaletteProperty = nullptr;
    s_SelectedBrushProperty = nullptr;
    s_SelectedBrushIndexProperty = nullptr;
    s_SelectedStrokeWidthProperty = nullptr;
    InkToolBarToolButton::ClearProperties();
}

void InkToolBarPenButtonProperties::MaxStrokeWidth(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_MaxStrokeWidthProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double InkToolBarPenButtonProperties::MaxStrokeWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_MaxStrokeWidthProperty));
}

void InkToolBarPenButtonProperties::MinStrokeWidth(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_MinStrokeWidthProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double InkToolBarPenButtonProperties::MinStrokeWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_MinStrokeWidthProperty));
}

void InkToolBarPenButtonProperties::Palette(winrt::IVector<winrt::Brush> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_PaletteProperty, ValueHelper<winrt::IVector<winrt::Brush>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::Brush> InkToolBarPenButtonProperties::Palette()
{
    return ValueHelper<winrt::IVector<winrt::Brush>>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_PaletteProperty));
}

void InkToolBarPenButtonProperties::SelectedBrush(winrt::Brush const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_SelectedBrushProperty, ValueHelper<winrt::Brush>::BoxValueIfNecessary(value));
    }
}

winrt::Brush InkToolBarPenButtonProperties::SelectedBrush()
{
    return ValueHelper<winrt::Brush>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_SelectedBrushProperty));
}

void InkToolBarPenButtonProperties::SelectedBrushIndex(int value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_SelectedBrushIndexProperty, ValueHelper<int>::BoxValueIfNecessary(value));
    }
}

int InkToolBarPenButtonProperties::SelectedBrushIndex()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_SelectedBrushIndexProperty));
}

void InkToolBarPenButtonProperties::SelectedStrokeWidth(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarPenButton*>(this)->SetValue(s_SelectedStrokeWidthProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double InkToolBarPenButtonProperties::SelectedStrokeWidth()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<InkToolBarPenButton*>(this)->GetValue(s_SelectedStrokeWidthProperty));
}
