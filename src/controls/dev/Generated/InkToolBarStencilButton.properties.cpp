// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InkToolBarStencilButton.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(InkToolBarStencilButton)
}

#include "InkToolBarStencilButton.g.cpp"

GlobalDependencyProperty InkToolBarStencilButtonProperties::s_IsProtractorItemVisibleProperty{ nullptr };
GlobalDependencyProperty InkToolBarStencilButtonProperties::s_IsRulerItemVisibleProperty{ nullptr };
GlobalDependencyProperty InkToolBarStencilButtonProperties::s_ProtractorProperty{ nullptr };
GlobalDependencyProperty InkToolBarStencilButtonProperties::s_RulerProperty{ nullptr };
GlobalDependencyProperty InkToolBarStencilButtonProperties::s_SelectedStencilProperty{ nullptr };

InkToolBarStencilButtonProperties::InkToolBarStencilButtonProperties()
{
    EnsureProperties();
}

void InkToolBarStencilButtonProperties::EnsureProperties()
{
    InkToolBarMenuButton::EnsureProperties();
    if (!s_IsProtractorItemVisibleProperty)
    {
        s_IsProtractorItemVisibleProperty =
            InitializeDependencyProperty(
                L"IsProtractorItemVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::InkToolBarStencilButton>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_IsRulerItemVisibleProperty)
    {
        s_IsRulerItemVisibleProperty =
            InitializeDependencyProperty(
                L"IsRulerItemVisible",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::InkToolBarStencilButton>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_ProtractorProperty)
    {
        s_ProtractorProperty =
            InitializeDependencyProperty(
                L"Protractor",
                winrt::name_of<winrt::InkPresenterProtractor>(),
                winrt::name_of<winrt::InkToolBarStencilButton>(),
                false /* isAttached */,
                ValueHelper<winrt::InkPresenterProtractor>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_RulerProperty)
    {
        s_RulerProperty =
            InitializeDependencyProperty(
                L"Ruler",
                winrt::name_of<winrt::InkPresenterRuler>(),
                winrt::name_of<winrt::InkToolBarStencilButton>(),
                false /* isAttached */,
                ValueHelper<winrt::InkPresenterRuler>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SelectedStencilProperty)
    {
        s_SelectedStencilProperty =
            InitializeDependencyProperty(
                L"SelectedStencil",
                winrt::name_of<winrt::InkToolBarStencilKind>(),
                winrt::name_of<winrt::InkToolBarStencilButton>(),
                false /* isAttached */,
                ValueHelper<winrt::InkToolBarStencilKind>::BoxedDefaultValue(),
                nullptr);
    }
}

void InkToolBarStencilButtonProperties::ClearProperties()
{
    s_IsProtractorItemVisibleProperty = nullptr;
    s_IsRulerItemVisibleProperty = nullptr;
    s_ProtractorProperty = nullptr;
    s_RulerProperty = nullptr;
    s_SelectedStencilProperty = nullptr;
    InkToolBarMenuButton::ClearProperties();
}

void InkToolBarStencilButtonProperties::IsProtractorItemVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarStencilButton*>(this)->SetValue(s_IsProtractorItemVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool InkToolBarStencilButtonProperties::IsProtractorItemVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<InkToolBarStencilButton*>(this)->GetValue(s_IsProtractorItemVisibleProperty));
}

void InkToolBarStencilButtonProperties::IsRulerItemVisible(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarStencilButton*>(this)->SetValue(s_IsRulerItemVisibleProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool InkToolBarStencilButtonProperties::IsRulerItemVisible()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<InkToolBarStencilButton*>(this)->GetValue(s_IsRulerItemVisibleProperty));
}

void InkToolBarStencilButtonProperties::Protractor(winrt::InkPresenterProtractor const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarStencilButton*>(this)->SetValue(s_ProtractorProperty, ValueHelper<winrt::InkPresenterProtractor>::BoxValueIfNecessary(value));
    }
}

winrt::InkPresenterProtractor InkToolBarStencilButtonProperties::Protractor()
{
    return ValueHelper<winrt::InkPresenterProtractor>::CastOrUnbox(static_cast<InkToolBarStencilButton*>(this)->GetValue(s_ProtractorProperty));
}

void InkToolBarStencilButtonProperties::Ruler(winrt::InkPresenterRuler const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarStencilButton*>(this)->SetValue(s_RulerProperty, ValueHelper<winrt::InkPresenterRuler>::BoxValueIfNecessary(value));
    }
}

winrt::InkPresenterRuler InkToolBarStencilButtonProperties::Ruler()
{
    return ValueHelper<winrt::InkPresenterRuler>::CastOrUnbox(static_cast<InkToolBarStencilButton*>(this)->GetValue(s_RulerProperty));
}

void InkToolBarStencilButtonProperties::SelectedStencil(winrt::InkToolBarStencilKind const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InkToolBarStencilButton*>(this)->SetValue(s_SelectedStencilProperty, ValueHelper<winrt::InkToolBarStencilKind>::BoxValueIfNecessary(value));
    }
}

winrt::InkToolBarStencilKind InkToolBarStencilButtonProperties::SelectedStencil()
{
    return ValueHelper<winrt::InkToolBarStencilKind>::CastOrUnbox(static_cast<InkToolBarStencilButton*>(this)->GetValue(s_SelectedStencilProperty));
}
