// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#pragma once

class InkToolBarProperties
{
public:
    InkToolBarProperties();

    void ActiveTool(winrt::InkToolBarToolButton const& value);
    winrt::InkToolBarToolButton ActiveTool();

    void ButtonFlyoutPlacement(winrt::InkToolBarButtonFlyoutPlacement const& value);
    winrt::InkToolBarButtonFlyoutPlacement ButtonFlyoutPlacement();

    void Children(winrt::DependencyObjectCollection const& value);
    winrt::DependencyObjectCollection Children();

    void InitialControls(winrt::InkToolBarInitialControls const& value);
    winrt::InkToolBarInitialControls InitialControls();

    void InkDrawingAttributes(winrt::InkDrawingAttributes const& value);
    winrt::InkDrawingAttributes InkDrawingAttributes();

    void IsRulerButtonChecked(bool value);
    bool IsRulerButtonChecked();

    void IsStencilButtonChecked(bool value);
    bool IsStencilButtonChecked();

    void Orientation(winrt::Orientation const& value);
    winrt::Orientation Orientation();

    void TargetInkCanvas(winrt::InkCanvas const& value);
    winrt::InkCanvas TargetInkCanvas();

    void TargetInkPresenter(winrt::IInspectable const& value);
    winrt::IInspectable TargetInkPresenter();

    static winrt::DependencyProperty ActiveToolProperty() { return s_ActiveToolProperty; }
    static winrt::DependencyProperty ButtonFlyoutPlacementProperty() { return s_ButtonFlyoutPlacementProperty; }
    static winrt::DependencyProperty ChildrenProperty() { return s_ChildrenProperty; }
    static winrt::DependencyProperty InitialControlsProperty() { return s_InitialControlsProperty; }
    static winrt::DependencyProperty InkDrawingAttributesProperty() { return s_InkDrawingAttributesProperty; }
    static winrt::DependencyProperty IsRulerButtonCheckedProperty() { return s_IsRulerButtonCheckedProperty; }
    static winrt::DependencyProperty IsStencilButtonCheckedProperty() { return s_IsStencilButtonCheckedProperty; }
    static winrt::DependencyProperty OrientationProperty() { return s_OrientationProperty; }
    static winrt::DependencyProperty TargetInkCanvasProperty() { return s_TargetInkCanvasProperty; }
    static winrt::DependencyProperty TargetInkPresenterProperty() { return s_TargetInkPresenterProperty; }

    static GlobalDependencyProperty s_ActiveToolProperty;
    static GlobalDependencyProperty s_ButtonFlyoutPlacementProperty;
    static GlobalDependencyProperty s_ChildrenProperty;
    static GlobalDependencyProperty s_InitialControlsProperty;
    static GlobalDependencyProperty s_InkDrawingAttributesProperty;
    static GlobalDependencyProperty s_IsRulerButtonCheckedProperty;
    static GlobalDependencyProperty s_IsStencilButtonCheckedProperty;
    static GlobalDependencyProperty s_OrientationProperty;
    static GlobalDependencyProperty s_TargetInkCanvasProperty;
    static GlobalDependencyProperty s_TargetInkPresenterProperty;

    winrt::event_token ActiveToolChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value);
    void ActiveToolChanged(winrt::event_token const& token);
    winrt::event_token EraseAllClicked(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value);
    void EraseAllClicked(winrt::event_token const& token);
    winrt::event_token EraserFlyoutItemClicked(winrt::TypedEventHandler<winrt::InkToolBarEraserFlyoutItemClickedEventArgs, winrt::IInspectable> const& value);
    void EraserFlyoutItemClicked(winrt::event_token const& token);
    winrt::event_token InkDrawingAttributesChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable> const& value);
    void InkDrawingAttributesChanged(winrt::event_token const& token);
    winrt::event_token IsStencilButtonCheckedChanged(winrt::TypedEventHandler<winrt::InkToolBar, winrt::InkToolBarIsStencilButtonCheckedChangedEventArgs> const& value);
    void IsStencilButtonCheckedChanged(winrt::event_token const& token);

    event_source<winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable>> m_activeToolChangedEventSource;
    event_source<winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable>> m_eraseAllClickedEventSource;
    event_source<winrt::TypedEventHandler<winrt::InkToolBarEraserFlyoutItemClickedEventArgs, winrt::IInspectable>> m_eraserFlyoutItemClickedEventSource;
    event_source<winrt::TypedEventHandler<winrt::InkToolBar, winrt::IInspectable>> m_inkDrawingAttributesChangedEventSource;
    event_source<winrt::TypedEventHandler<winrt::InkToolBar, winrt::InkToolBarIsStencilButtonCheckedChangedEventArgs>> m_isStencilButtonCheckedChangedEventSource;

    static void EnsureProperties();
    static void ClearProperties();
};
